"use client"

import Image from "next/image"
import Link from "next/link"
import { MapPin, Phone, Mail, Calendar, Star, MapIcon, Heart, ShoppingCart } from "lucide-react"
import { useRouter, useParams } from "next/navigation"
import { useState, useEffect } from "react"

import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { vendors } from "@/lib/data"
import { useAuth } from "@/lib/auth"
import { useBooking } from "@/hooks/use-booking"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { ToastAction } from "@/components/ui/toast"
import { ServiceCard } from '@/components/vendor/ServiceCard'
import { ReviewCard } from '@/components/vendor/ReviewCard'
import { SelectedServicesSummary } from '@/components/vendor/SelectedServicesSummary'
import { ImageGallery } from '@/components/vendor/ImageGallery'
import { useServiceSelection } from '@/hooks/useServiceSelection'
import { mockVendorData, type VendorDetails } from '@/lib/types/vendor'
import { PlaceholderImage } from '@/components/vendor/PlaceholderImage'
import { PaymentGateway } from "@/components/payment-gateway"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ServiceBooking } from "@/components/home-service/ServiceBooking"

export default function VendorDetailsPage() {
  const router = useRouter()
  const params = useParams()
  const vendorId = params?.id as string
  const { isAuthenticated, user, favorites, toggleFavorite } = useAuth()
  const { handleBookingSubmission, isProcessing } = useBooking()
  const [vendor, setVendor] = useState<VendorDetails>(mockVendorData)
  const [loading, setLoading] = useState(true)
  const [bookingOpen, setBookingOpen] = useState(false)
  const [date, setDate] = useState<Date | undefined>(undefined)
  const [name, setName] = useState("")
  const [phone, setPhone] = useState("")
  const [email, setEmail] = useState("")
  const [notes, setNotes] = useState("")
  const [selectedPackage, setSelectedPackage] = useState<string>("")
  const [isFavorite, setIsFavorite] = useState(false)
  const [showPayment, setShowPayment] = useState(false)
  const [bookingData, setBookingData] = useState<any>(null)
  const [selectedServices, setSelectedServices] = useState<string[]>([])
  const [showBooking, setShowBooking] = useState(false)

  const { totalPrice, toggleService, isServiceSelected } = useServiceSelection()

  useEffect(() => {
    if (!vendorId) {
      toast({
        title: "Invalid Vendor ID",
        description: "No vendor ID was provided.",
        variant: "destructive",
      })
      router.push('/vendors')
      return
    }

    // Find the vendor from the actual vendors data
    const foundVendor = vendors.find(v => v.id === vendorId)
    
    if (foundVendor) {
      // Transform the vendor data to match VendorDetails type
      const vendorDetails: VendorDetails = {
        id: foundVendor.id,
        name: foundVendor.name,
        location: foundVendor.location,
        rating: foundVendor.rating,
        category: foundVendor.category,
        coverImage: foundVendor.image,
        description: foundVendor.description,
        shortDescription: foundVendor.description.split('.')[0], // First sentence as short description
        services: foundVendor.items.map((item, index) => ({
          id: index + 1,
          name: item.name,
          price: parseInt(item.price.replace(/[^\d]/g, '')), // Convert price string to number
          description: 'details' in item ? item.details : item.capacity || ''
        })),
        gallery: [foundVendor.image], // Use main image for now
        reviews: [], // We'll add reviews later
        availability: "Available all days. Advance booking required.",
        refundPolicy: "50% refund for cancellations made 7 days before the event."
      }
      setVendor(vendorDetails)
    } else {
      // Handle vendor not found
      toast({
        title: "Vendor Not Found",
        description: "The requested vendor could not be found.",
        variant: "destructive",
      })
      router.push('/vendors')
    }
    setLoading(false)

    // Clear selected services when leaving the page
    return () => {
      if (typeof window !== 'undefined') {
        sessionStorage.removeItem('selectedServices');
      }
    };
  }, [vendorId, router])

  // Clear selected services when leaving the page
  useEffect(() => {
    return () => {
      if (typeof window !== 'undefined') {
        sessionStorage.removeItem('selectedServices');
      }
    };
  }, []);

  // Check if vendor is in favorites
  useEffect(() => {
    if (vendor && favorites) {
      setIsFavorite(favorites.some((fav) => fav.id === vendor.id))
    }
  }, [vendor, favorites])

  const handleBookNow = (packageName?: string) => {
    if (packageName) {
      setSelectedPackage(packageName)
    }
    setBookingOpen(true)
  }

  const handleBookingSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to book services.",
        variant: "destructive",
      })
      return
    }

    if (!date) {
      toast({
        title: "Date Required",
        description: "Please select a booking date.",
        variant: "destructive",
      })
      return
    }

    if (selectedServices.length === 0) {
      toast({
        title: "Services Required",
        description: "Please select at least one service to book.",
        variant: "destructive",
      })
      return
    }

    if (!name || !phone || !email) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields.",
        variant: "destructive",
      })
      return
    }

    try {
      // Create a new booking ID
      const bookingId = `booking-${Date.now()}`
      
      // Format the booking data
      const newBookingData = {
        id: bookingId,
        vendorId: vendor.id,
        vendorName: vendor.name,
        vendorCategory: vendor.category,
        bookingDate: date.toISOString().split('T')[0],
        status: "Pending",
        amount: totalPrice,
        paymentStatus: "Pending",
        image: vendor.coverImage,
        clientName: name,
        clientPhone: phone,
        clientEmail: email,
        eventDetails: `Booking for ${selectedServices.map(s => s.name).join(", ")}`,
        notes: notes,
        createdAt: new Date().toISOString(),
        guestCount: 0
      }

      // Submit the booking using the updated hook
      const success = await handleBookingSubmission(newBookingData)

      if (success) {
        setBookingData(newBookingData)
        setShowPayment(true)
      }
    } catch (error) {
      console.error('Error submitting booking:', error)
      toast({
        title: "Booking Failed",
        description: "There was an error submitting your booking. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handlePaymentSuccess = () => {
    setShowPayment(false)
    setBookingOpen(false)
    toast({
      title: "Booking Confirmed!",
      description: "Your booking has been confirmed. Check your email for details.",
    })
    router.push('/dashboard/bookings')
  }

  const handlePaymentCancel = () => {
    setShowPayment(false)
  }

  const handleToggleFavorite = () => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to add vendors to favorites.",
        variant: "destructive",
        action: (
          <ToastAction altText="Login" onClick={() => router.push('/login')}>
            Login
          </ToastAction>
        ),
      })
      return
    }

    toggleFavorite(vendor)
    setIsFavorite(!isFavorite)
  }

  const handleProceedToBook = () => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to book services.",
        variant: "destructive",
        action: (
          <ToastAction altText="Login" onClick={() => router.push('/login')}>
            Login
          </ToastAction>
        ),
      })
      return
    }
    setShowBooking(true)
  }

  const handleServiceSelect = (serviceId: string) => {
    toggleService(serviceId)
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="h-64 bg-gray-200 rounded-lg mb-8"></div>
          <div className="space-y-4">
            <div className="h-8 bg-gray-200 rounded w-1/4"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="relative h-[400px] w-full">
        <Image
          src={vendor.coverImage}
          alt={vendor.name}
          fill
          className="object-cover"
          priority
        />
        <div className="absolute inset-0 bg-black bg-opacity-40">
          <div className="container mx-auto px-4 h-full flex items-end pb-8">
            <div className="text-white">
              <h1 className="text-4xl font-bold mb-2">{vendor.name}</h1>
              <div className="flex items-center gap-4 text-sm">
                <span className="flex items-center gap-1">
                  <MapPin className="h-4 w-4" />
                  {vendor.location}
                </span>
                <span className="flex items-center gap-1">
                  <Star className="h-4 w-4 text-yellow-400" />
                  {vendor.rating} Rating
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Left Column - Vendor Details */}
          <div className="flex-1">
            <Tabs defaultValue="services" className="w-full">
              <TabsList className="mb-4">
                <TabsTrigger value="services">Services</TabsTrigger>
                <TabsTrigger value="about">About</TabsTrigger>
                <TabsTrigger value="gallery">Gallery</TabsTrigger>
                <TabsTrigger value="reviews">Reviews</TabsTrigger>
              </TabsList>

              <TabsContent value="services" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {vendor.services.map((service) => (
                    <ServiceCard
                      key={service.id}
                      service={service}
                      isSelected={isServiceSelected(service.id.toString())}
                      onSelect={() => handleServiceSelect(service.id.toString())}
                    />
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="about">
                <Card>
                  <CardContent className="pt-6">
                    <div className="space-y-6">
                      <div>
                        <h3 className="font-semibold mb-2">About {vendor.name}</h3>
                        <p className="text-gray-600">{vendor.description}</p>
                      </div>

                      <div>
                        <h3 className="font-semibold mb-2">Availability</h3>
                        <p className="text-gray-600">{vendor.availability}</p>
                      </div>

                      <div>
                        <h3 className="font-semibold mb-2">Refund Policy</h3>
                        <p className="text-gray-600">{vendor.refundPolicy}</p>
                      </div>

                      <div>
                        <h3 className="font-semibold mb-2">Contact Information</h3>
                        <div className="space-y-2 text-gray-600">
                          <p className="flex items-center gap-2">
                            <Phone className="h-4 w-4" />
                            +91 98765 43210
                          </p>
                          <p className="flex items-center gap-2">
                            <Mail className="h-4 w-4" />
                            contact@{vendor.name.toLowerCase().replace(/\s+/g, '')}.com
                          </p>
                          <p className="flex items-center gap-2">
                            <MapIcon className="h-4 w-4" />
                            {vendor.location}
                          </p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="gallery">
                <ImageGallery images={vendor.gallery} />
              </TabsContent>

              <TabsContent value="reviews">
                <div className="space-y-4">
                  {vendor.reviews.length > 0 ? (
                    vendor.reviews.map((review, index) => (
                      <ReviewCard key={index} review={review} />
                    ))
                  ) : (
                    <p className="text-center text-gray-500 py-8">No reviews yet</p>
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Column - Booking Summary */}
          <div className="lg:w-1/3">
            <div className="sticky top-4 space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Selected Services</CardTitle>
                </CardHeader>
                <CardContent>
                  <SelectedServicesSummary
                    services={vendor.services}
                    selectedServices={selectedServices}
                    totalPrice={totalPrice}
                  />
                  
                  <div className="mt-6 space-y-4">
                    <Button
                      onClick={handleProceedToBook}
                      className="w-full"
                      disabled={selectedServices.length === 0}
                    >
                      Book Now
                    </Button>
                    
                    <Button
                      variant="outline"
                      onClick={handleToggleFavorite}
                      className="w-full"
                    >
                      {isFavorite ? (
                        <span className="flex items-center gap-2">
                          <Heart className="h-4 w-4 fill-current" />
                          Remove from Favorites
                        </span>
                      ) : (
                        <span className="flex items-center gap-2">
                          <Heart className="h-4 w-4" />
                          Add to Favorites
                        </span>
                      )}
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Badges */}
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary">
                  <Star className="h-4 w-4 mr-1" />
                  Top Rated
                </Badge>
                <Badge variant="secondary">Verified</Badge>
                <Badge variant="secondary">Premium Vendor</Badge>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Service Booking Dialog */}
      <ServiceBooking
        open={showBooking}
        onClose={() => setShowBooking(false)}
        vendor={vendor}
        selectedServices={selectedServices}
        totalPrice={totalPrice}
      />

      {/* Payment Dialog */}
      {showPayment && bookingData && (
        <Dialog open={showPayment} onOpenChange={setShowPayment}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Complete Payment</DialogTitle>
              <DialogDescription>
                Please complete your payment to confirm your booking.
              </DialogDescription>
            </DialogHeader>
            <PaymentGateway
              amount={bookingData.amount}
              onSuccess={handlePaymentSuccess}
              onCancel={handlePaymentCancel}
            />
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
} 